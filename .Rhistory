## Função de densidade de probabilidade
d_UHN <- function(y, alpha, lambda) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
d_UNH(2)
# Log-verossimilhança da UNH
loglik_UNH <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
## Função de densidade de probabilidade
d_UNH <- function(y, alpha, lambda) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
d_UNH(2)
d_UNH(2,0.4,0.4)
integrate(dUIG, 0, 1)
integrate(d_UNH, 0, 1)
## Função de densidade de probabilidade
d_UNH <- function(y, alpha = 0.5, lambda = 2) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
d_UNH(2,0.4,0.4)
integrate(d_UNH, 0, 1)
d_UNH(2)
## Função de densidade de probabilidade
d_UNH <- function(y, alpha = 0.5, lambda = 2) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
d_UNH(2,0.4,0.4)
d_UNH(2)
integrate(d_UNH, 0, 1)
d_UNH(2,0.4,0.4)
d_UNH(2)
d_UNH(0)
## Função de distribuição acumulada
p_UNH <- function(y, alpha, lambda) {
return(1 - exp(1 - (1 - lambda * log(y))^alpha))
}
P_UNH(1)
p_UNH(1)
p_UNH(2,0.4,0.4)
## Função quantílica
q_UNH <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
## Função quantílica
q_UNH <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
integrate(d_UNH, 0, 1)
## Função de distribuição acumulada
p_UNH <- function(y, alpha, lambda) {
return(1 - exp(1 - (1 - lambda * log(y))^alpha))
}
p_UNH(2,0.4,0.4)
## Função quantílica
q_UNH <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
## Método de geração de números aleatórios
r_UNH <- function(n, alpha, lambda) {
u <- runif(n)
return(qunit_nh(u, alpha, lambda))
}
# Log-verossimilhança da UNH
loglik_UNH <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
# Derivada em relação a alpha
d_alpha <- D(loglik_UNH, "alpha")
# Derivada em relação a lambda
d_lambda <- D(loglik_UNH, "lambda")
# Derivada mista: primeiro alpha, depois lambda
d2_alpha_lambda <- D(d_alpha, "lambda")
valores <- list(alpha = 2, lambda = 1.5, y = 0.7)
with(valores, eval(d_alpha))
with(valores, eval(d_lambda))
with(valores, eval(d2_alpha_lambda))
## Função de densidade de probabilidade
d_NHU <- function(y, alpha = 0.5, lambda = 2) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
d_NHU(2,0.4,0.4)
integrate(d_NHU, 0, 1)
## Função de distribuição acumulada
p_NHU <- function(y, alpha, lambda) {
return(1 - exp(1 - (1 - lambda * log(y))^alpha))
}
p_NHU(2,0.4,0.4)
## Função quantílica
q_NHU <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
## Método de geração de números aleatórios
r_NHU <- function(n, alpha, lambda) {
u <- runif(n)
return(qunit_nh(u, alpha, lambda))
}
# Log-verossimilhança da NHU
loglik_NHU <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
# Derivada em relação a alpha
d_alpha <- D(loglik_NHU, "alpha")
# Derivada em relação a lambda
d_lambda <- D(loglik_NHU, "lambda")
# Derivada mista: primeiro alpha, depois lambda
d2_alpha_lambda <- D(d_alpha, "lambda")
# Visualizar
d_alpha
d_lambda
d2_alpha_lambda
# Exemplo de uso
set.seed(123)
amostra <- r_NHU(n = 1000, alpha = 2, lambda = 1)
## Método de geração de números aleatórios
r_NHU <- function(n, alpha, lambda) {
u <- runif(n)
return(q_NHU(u, alpha, lambda))
}
# Exemplo de uso
set.seed(123)
amostra <- r_NHU(n = 1000, alpha = 2, lambda = 1)
hist(amostra, breaks = 30, main = "Amostra da distribuição UNH", xlab = "y")
## Método de geração de números aleatórios
r_NHU <- function(n, alpha, lambda) {
u <- runif(n)
return(q_NHU(u, alpha, lambda))
}
# Exemplo de uso
set.seed(123)
amostra <- r_NHU(n = 1000, alpha = 2, lambda = 1)
hist(amostra, breaks = 30, main = "Amostra da distribuição UNH", xlab = "y")
amostra <- r_NHU(n = 1000, alpha = 2, lambda = 1)
hist(amostra, breaks = 30, main = "Amostra da distribuição UNH", xlab = "y")
amostra <- r_NHU(n = 1000, alpha = 2, lambda = 1)
hist(amostra, breaks = 30, main = "Amostra da distribuição UNH", xlab = "y")
amostra <- r_NHU(n = 1000, alpha = 2, lambda = 1)
hist(amostra, breaks = 30, main = "Amostra da distribuição UNH", xlab = "y")
tinytex::reinstall_tinytex(repository = "illinois")
## Função de densidade de probabilidade
d_NHU <- function(y, alpha, lambda) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
d_NHU(2,0.4,0.4)
integrate(d_NHU, 0, 1)
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
# Log-verossimilhança da NHU
loglik_NHU <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
# Log-verossimilhança da NHU
loglik_NHU_exp <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
loglik_NHU <- function(par, x) {
alpha <- par[1]
lambda <- par[2]
y <- x
# Verificação de domínio para evitar log de número negativo
inside_log <- 1 - lambda * log(y)
if (any(inside_log <= 0)) return(Inf)  # penalidade para evitar domínio inválido
ll <- sum(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(inside_log) +
(1 - inside_log^alpha)
)
return(-ll)  # otimização minimiza, por isso retornamos o negativo
}
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
p_NHU <- function(y, alpha, lambda) {
return(1 - exp(1 - (1 - lambda * log(y))^alpha))
}
p_NHU <- function(y, alpha, lambda) {
return(1 - exp(1 - (1 - lambda * log(y))^alpha))
}
# Função de densidade de probabilidade ------------------------------------
d_NHU <- function(y, alpha, lambda) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
p_NHU <- function(y, alpha, lambda) {
return(1 - exp(1 - (1 - lambda * log(y))^alpha))
}
# Função quantílica -------------------------------------------------------
q_NHU <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
# Exemplo de uso
q_NHU(2,0.4,0.4)
# Exemplo de uso
q_NHU(1,0.4,0.4)
## Método de geração de números aleatórios
r_NHU <- function(n, alpha, lambda) {
u <- runif(n)
return(q_NHU(u, alpha, lambda))
}
# Função quantílica -------------------------------------------------------
q_NHU <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
# Função quantílica -------------------------------------------------------
q_NHU <- function(p, alpha, lambda) {
return(exp((1 - (-log(1 - p))^(1 / alpha)) / lambda))
}
# Geração de números aleatórios -------------------------------------------
r_NHU <- function(n, alpha, lambda) {
u <- runif(n)
return(q_NHU(u, alpha, lambda))
}
loglik_NHU <- function(par, x) {
alpha <- par[1]
lambda <- par[2]
y <- x
# Verificação de domínio para evitar log de número negativo
inside_log <- 1 - lambda * log(y)
if (any(inside_log <= 0)) return(Inf)  # penalidade para evitar domínio inválido
ll <- sum(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(inside_log) +
(1 - inside_log^alpha)
)
return(-ll)  # otimização minimiza, por isso retornamos o negativo
}
# Derivada em relação a alpha
d_alpha <- D(loglik_NHU, "alpha")
# Derivada em relação a lambda
d_lambda <- D(loglik_NHU, "lambda")
# Derivada mista: primeiro alpha, depois lambda
d2_alpha_lambda <- D(d_alpha, "lambda")
# Visualizar
d_alpha
d_lambda
d2_alpha_lambda
# Estimação
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
loglik_NHU <- function(par, x) {
alpha <- par[1]
lambda <- par[2]
y <- x
# Verificações de validade
if (any(is.na(y)) || any(y <= 0) || is.na(alpha) || is.na(lambda) ||
alpha <= 0 || lambda <= 0 || !is.finite(alpha) || !is.finite(lambda)) {
return(Inf)
}
inside_log <- 1 - lambda * log(y)
if (any(is.na(inside_log)) || any(!is.finite(inside_log)) || any(inside_log <= 0)) {
return(Inf)
}
ll <- sum(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(inside_log) +
(1 - inside_log^alpha)
)
return(-ll)
}
loglik_NHU <- function(par, x) {
alpha <- par[1]
lambda <- par[2]
y <- x
# Verificações de validade
if (any(is.na(y)) || any(y <= 0) || is.na(alpha) || is.na(lambda) ||
alpha <= 0 || lambda <= 0 || !is.finite(alpha) || !is.finite(lambda)) {
return(Inf)
}
inside_log <- 1 - lambda * log(y)
if (any(is.na(inside_log)) || any(!is.finite(inside_log)) || any(inside_log <= 0)) {
return(Inf)
}
ll <- sum(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(inside_log) +
(1 - inside_log^alpha)
)
return(-ll)
}
# Estimação
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
# Estimação
estim <- function(x) {
result <- optim(
par = c(1, 1),               # valores iniciais
fn = loglik_NHU,
x = x,
method = "L-BFGS-B",
lower = c(1e-4, 1e-4),       # limites inferiores (evita zero e negativos)
upper = c(10, 10)            # limites superiores (pode ajustar)
)
return(result$par)
}
estim(x)
# Estimação
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_NHU,
x = x,
method = "SANN")
return(result$par)
}
estim(x)
set.seed(1248)
nrep <- 500
n <- 100
alpha_true <- 0.8
lambda_true <- 2.5
alpha_hat <- numeric(nrep)
lambda_hat <- numeric(nrep)
amostra <- r_UNH(n, alpha_true, lambda_true)
for(i in 1:nrep){
amostra <- r_UNH(n, alpha_true, lambda_true)
est <- estim(amostra)
alpha_hat[i] <- est[1]
lambda_hat[i] <- est[2]
}
# Geração de números aleatórios -------------------------------------------
r_NHU <- function(n, alpha, lambda) {
u <- runif(n)
return(q_NHU(u, alpha, lambda))
}
for(i in 1:nrep){
amostra <- r_UNH(n, alpha_true, lambda_true)
est <- estim(amostra)
alpha_hat[i] <- est[1]
lambda_hat[i] <- est[2]
}
for(i in 1:nrep){
amostra <- r_NHU(n, alpha_true, lambda_true)
est <- estim(amostra)
alpha_hat[i] <- est[1]
lambda_hat[i] <- est[2]
}
media_alpha <- mean(alpha_hat)
media_lambda <- mean(lambda_hat)
# Viés
bies_alpha <- media_alpha - alpha_true
bies_lambda <- media_lambda - lambda_true
# EQM
eqm_alpha <- mean((alpha_hat - alpha_true)^2)
eqm_lambda <- mean((lambda_hat - lambda_true)^2)
# Resultados
resultados <- data.frame(
Parametro = c("alpha", "lambda"),
Verdadeiro = c(alpha_true, lambda_true),
Estimado = round(c(media_alpha, media_lambda),4),
Vies = round(c(bies_alpha, bies_lambda), 4),
EQM = round(c(eqm_alpha, eqm_lambda), 4)
)
resultados
# Bias
bias_alpha <- media_alpha - alpha_true
bias_lambda <- media_lambda - lambda_true
# Bias
bias_alpha <- media_alpha - alpha_true
bias_lambda <- media_lambda - lambda_true
# Resultados
resultados <- data.frame(
Parametro = c("alpha", "lambda"),
Verdadeiro = c(alpha_true, lambda_true),
Estimado = round(c(media_alpha, media_lambda),4),
Vies = round(c(bias_alpha, bias_lambda), 4),
EQM = round(c(eqm_alpha, eqm_lambda), 4)
)
resultados
set.seed(1248)
nrep <- 100
set.seed(1234)
nrep <- 100
n <- 100
alpha_true <- 0.8
lambda_true <- 2.5
alpha_hat <- numeric(nrep)
lambda_hat <- numeric(nrep)
for(i in 1:nrep){
amostra <- r_NHU(n, alpha_true, lambda_true)
est <- estim(amostra)
alpha_hat[i] <- est[1]
lambda_hat[i] <- est[2]
}
media_alpha <- mean(alpha_hat)
media_lambda <- mean(lambda_hat)
# Bias
bias_alpha <- media_alpha - alpha_true
bias_lambda <- media_lambda - lambda_true
# EQM
eqm_alpha <- mean((alpha_hat - alpha_true)^2)
eqm_lambda <- mean((lambda_hat - lambda_true)^2)
# Resultados
resultados <- data.frame(
Parametro = c("alpha", "lambda"),
Verdadeiro = c(alpha_true, lambda_true),
Estimado = round(c(media_alpha, media_lambda),4),
Vies = round(c(bias_alpha, bias_lambda), 4),
EQM = round(c(eqm_alpha, eqm_lambda), 4)
)
resultados
source("H:/Outros computadores/Meu laptop/Estatística/2025.1/Taxas/UNH_functions.R", echo=TRUE)
source("H:/Outros computadores/Meu laptop/Estatística/2025.1/Taxas/UNH_functions.R", echo=TRUE)
source("H:/Outros computadores/Meu laptop/Estatística/2025.1/Taxas/UNH_functions.R", echo=TRUE)
# Expressão da log-verossimilhança da UNH
loglik_UNH_exp <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
# Derivada em relação a alpha
d_alpha <- D(loglik_UNH, "alpha")
# Derivada em relação a alpha
d_alpha <- D(loglik_UNH_exp, "alpha")
# Derivada em relação a lambda
d_lambda <- D(loglik_UNH_exp, "lambda")
# Derivada mista: primeiro alpha, depois lambda
d2_alpha_lambda <- D(d_alpha, "lambda")
source("H:/Outros computadores/Meu laptop/Estatística/2025.1/Taxas/UNH_functions.R", echo=TRUE)
# Importar funções
source("UNH_functions.R")
# Importar funções
source("UNH_functions.R")
setwd("H:/Outros computadores/Meu laptop/Estatística/2025.1/Taxas")
# Importar funções
source("UNH_functions.R")
# Simulação
set.seed(1234)
nrep <- 100
n <- 100
alpha_true <- 0.8
lambda_true <- 2.5
alpha_hat <- numeric(nrep)
lambda_hat <- numeric(nrep)
for(i in 1:nrep){
amostra <- r_NHU(n, alpha_true, lambda_true)
est <- estim(amostra)
alpha_hat[i] <- est[1]
lambda_hat[i] <- est[2]
}
